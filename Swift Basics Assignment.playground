import Foundation

/*:
# Задачи по основам Swift
Решите каждую задачу, используя приведенные примеры для проверки правильности.
*/

//: ## Задача 1: Найти количество четных чисел
/*:
Напишите функцию `countEvenNumbers(in:)`, которая принимает массив целых чисел и возвращает количество четных чисел.

### Примеры:
1. Вход: `[1, 2, 3, 4, 5, 6]` → Выход: `3`
2. Вход: `[7, 9, 11, 14]` → Выход: `1`
*/
func countEvenNumbers(in numbers: [Int]) -> Int {
    // Ваш код
    return 0
}

// Пример использования
countEvenNumbers(in: [1, 2, 3, 4, 5, 6]) // Ожидается: 3
countEvenNumbers(in: [7, 9, 11, 14])     // Ожидается: 1

//: ## Задача 2: Объединить два массива без повторений
/*:
Напишите функцию `mergeArrays(_:_:)`, которая объединяет два массива, удаляя повторяющиеся элементы.

### Примеры:
1. Вход: `[1, 2, 3]`, `[3, 4, 5]` → Выход: `[1, 2, 3, 4, 5]`
2. Вход: `[10, 20]`, `[20, 30, 40]` → Выход: `[10, 20, 30, 40]`
*/
func mergeArrays(_ array1: [Int], _ array2: [Int]) -> [Int] {
    // Ваш код
    return []
}

// Пример использования
mergeArrays([1, 2, 3], [3, 4, 5])        // Ожидается: [1, 2, 3, 4, 5]
mergeArrays([10, 20], [20, 30, 40])      // Ожидается: [10, 20, 30, 40]

//: ## Задача 3: Сдвиг элементов массива
/*:
Напишите функцию `rotateArray(_:by:)`, которая принимает массив и число `n`, сдвигая массив на `n` позиций вправо.

### Примеры:
1. Вход: `[1, 2, 3, 4, 5]`, `2` → Выход: `[4, 5, 1, 2, 3]`
2. Вход: `[10, 20, 30]`, `1` → Выход: `[30, 10, 20]`
*/
func rotateArray(_ array: [Int], by positions: Int) -> [Int] {
    // Ваш код
    return []
}

// Пример использования
rotateArray([1, 2, 3, 4, 5], by: 2)      // Ожидается: [4, 5, 1, 2, 3]
rotateArray([10, 20, 30], by: 1)         // Ожидается: [30, 10, 20]

//: ## Задача 4: Найти самое длинное слово в строке
/*:
Напишите функцию `longestWord(in:)`, которая принимает строку и возвращает самое длинное слово.

### Примеры:
1. Вход: `"Swift is awesome"` → Выход: `"awesome"`
2. Вход: `"Find the longest word"` → Выход: `"longest"`
*/
func longestWord(in text: String) -> String {
    // Ваш код
    return ""
}

// Пример использования
longestWord(in: "Swift is awesome")      // Ожидается: "awesome"
longestWord(in: "Find the longest word") // Ожидается: "longest"

//: ## Задача 5: Преобразовать числа в строку
/*:
Напишите функцию `convertToString(_:)`, которая принимает массив чисел и возвращает одну строку, где все числа разделены запятыми.

### Примеры:
1. Вход: `[1, 2, 3, 4]` → Выход: `"1,2,3,4"`
2. Вход: `[10, 20, 30]` → Выход: `"10,20,30"`
*/
func convertToString(_ numbers: [Int]) -> String {
    // Ваш код
    return ""
}

// Пример использования
convertToString([1, 2, 3, 4])             // Ожидается: "1,2,3,4"
convertToString([10, 20, 30])            // Ожидается: "10,20,30"

//: ## Задача 6: Найти слова с заданным суффиксом
/*:
Напишите функцию `findWords(withSuffix:in:)`, которая принимает суффикс и строку, возвращая массив слов, заканчивающихся на этот суффикс.

### Примеры:
1. Вход: `"ing"`, `"I am enjoying coding and learning"` → Выход: `["enjoying", "coding", "learning"]`
2. Вход: `"ed"`, `"She danced and enjoyed her day"` → Выход: `["danced", "enjoyed"]`
*/
func findWords(withSuffix suffix: String, in text: String) -> [String] {
    // Ваш код
    return []
}

// Пример использования
findWords(withSuffix: "ing", in: "I am enjoying coding and learning") // Ожидается: ["enjoying", "coding", "learning"]
findWords(withSuffix: "ed", in: "She danced and enjoyed her day")      // Ожидается: ["danced", "enjoyed"]

//: ## Задача 7: Проверить, все ли элементы массива уникальны
/*:
Напишите функцию `areElementsUnique(in:)`, которая возвращает `true`, если все элементы массива уникальны.

### Примеры:
1. Вход: `[1, 2, 3, 4]` → Выход: `true`
2. Вход: `[1, 2, 2, 3]` → Выход: `false`
*/
func areElementsUnique(in numbers: [Int]) -> Bool {
    // Ваш код
    return false
}

// Пример использования
areElementsUnique(in: [1, 2, 3, 4])       // Ожидается: true
areElementsUnique(in: [1, 2, 2, 3])       // Ожидается: false

//: ## Задача 8: Найти разницу между самым большим и самым маленьким числом
/*:
Напишите функцию `differenceBetweenMinMax(_:)`, которая возвращает разницу между самым большим и самым маленьким числом в массиве.

### Примеры:
1. Вход: `[5, 1, 9, 3]` → Выход: `8`
2. Вход: `[10, 20, 30, 40]` → Выход: `30`
*/
func differenceBetweenMinMax(_ numbers: [Int]) -> Int {
    // Ваш код
    return 0
}

// Пример использования
differenceBetweenMinMax([5, 1, 9, 3])      // Ожидается: 8
differenceBetweenMinMax([10, 20, 30, 40]) // Ожидается: 30

//: ## Задача 9: Преобразовать массив строк в массив их длин
/*:
Напишите функцию `lengths(of:)`, которая возвращает массив длин строк из входного массива.

### Примеры:
1. Вход: `["Swift", "Playground", "Code"]` → Выход: `[5, 10, 4]`
2. Вход: `["Hello", "World"]` → Выход: `[5, 5]`
*/
func lengths(of words: [String]) -> [Int] {
    // Ваш код
    return []
}

// Пример использования
lengths(of: ["Swift", "Playground", "Code"]) // Ожидается: [5, 10, 4]
lengths(of: ["Hello", "World"])             // Ожидается: [5, 5]

//: ## Задача 10: Найти все индексы заданного числа
/*:
Напишите функцию `findIndices(of:in:)`, которая возвращает все индексы, на которых в массиве находится заданное число.

### Примеры:
1. Вход: `[1, 2, 3, 2, 4, 2]`, `2` → Выход: `[1, 3, 5]`
2. Вход: `[5, 5, 5]`, `5` → Выход: `[0, 1, 2]`
*/
func findIndices(of number: Int, in array: [Int]) -> [Int] {
    // Ваш код
    return []
}

// Пример использования
findIndices(of: 2, in: [1, 2, 3, 2, 4, 2])  // Ожидается: [1, 3, 5]
findIndices(of: 5, in: [5, 5, 5])          // Ожидается: [0, 1, 2]

//: ## Задача 11: Найти количество слов в строке
/*:
Напишите функцию `countWords(in:)`, которая принимает строку и возвращает количество слов в этой строке.

### Примеры:
- Вход: "Swift is awesome" → Выход: `3`
- Вход: "Hello world" → Выход: `2`
*/
func countWords(in text: String) -> Int {
    // Ваш код
    return 0
}

// Пример использования
countWords(in: "Swift is awesome") // Ожидается: 3
countWords(in: "Hello world")      // Ожидается: 2

//: ## Задача 12: Развернуть строку
/*:
Напишите функцию `reverseString(_:)`, которая принимает строку и возвращает её в обратном порядке.

### Примеры:
- Вход: "Swift" → Выход: "tfiwS"
- Вход: "Hello" → Выход: "olleH"
*/
func reverseString(_ text: String) -> String {
    // Ваш код
    return ""
}

// Пример использования
reverseString("Swift") // Ожидается: "tfiwS"
reverseString("Hello") // Ожидается: "olleH"

//: ## Задача 13: Найти минимальное и максимальное число в массиве
/*:
Напишите функцию `minMax(in:)`, которая возвращает кортеж с минимальным и максимальным числами из массива.

### Примеры:
- Вход: `[3, 5, 1, 9, 2]` → Выход: `(1, 9)`
- Вход: `[10, 20, 30]` → Выход: `(10, 30)`
*/
func minMax(in numbers: [Int]) -> (min: Int, max: Int)? {
    // Ваш код
    return nil
}

// Пример использования
minMax(in: [3, 5, 1, 9, 2]) // Ожидается: (1, 9)
minMax(in: [10, 20, 30])    // Ожидается: (10, 30)

//: ## Задача 14: Найти все четные числа в массиве
/*:
Напишите функцию `findEvenNumbers(in:)`, которая возвращает массив всех четных чисел из входного массива.

### Примеры:
- Вход: `[1, 2, 3, 4, 5]` → Выход: `[2, 4]`
- Вход: `[10, 15, 20]` → Выход: `[10, 20]`
*/
func findEvenNumbers(in numbers: [Int]) -> [Int] {
    // Ваш код
    return []
}

// Пример использования
findEvenNumbers(in: [1, 2, 3, 4, 5]) // Ожидается: [2, 4]
findEvenNumbers(in: [10, 15, 20])    // Ожидается: [10, 20]

//: ## Задача 15: Проверить строку на палиндром
/*:
Напишите функцию `isPalindrome(_:)`, которая возвращает `true`, если строка является палиндромом.

### Примеры:
- Вход: "madam" → Выход: `true`
- Вход: "swift" → Выход: `false`
*/
func isPalindrome(_ text: String) -> Bool {
    // Ваш код
    return false
}

// Пример использования
isPalindrome("madam") // Ожидается: true
isPalindrome("swift") // Ожидается: false

//: ## Задача 16: Объединить строки с разделителем
/*:
Напишите функцию `join(strings:with:)`, которая принимает массив строк и строку-разделитель, возвращая одну строку.

### Примеры:
- Вход: `["apple", "banana", "cherry"]`, ", " → Выход: "apple, banana, cherry"
- Вход: `["a", "b", "c"]`, "-" → Выход: "a-b-c"
*/
func join(strings: [String], with separator: String) -> String {
    // Ваш код
    return ""
}

// Пример использования
join(strings: ["apple", "banana", "cherry"], with: ", ") // Ожидается: "apple, banana, cherry"
join(strings: ["a", "b", "c"], with: "-")              // Ожидается: "a-b-c"

//: ## Задача 17: Удалить повторяющиеся элементы из массива
/*:
Напишите функцию `removeDuplicates(from:)`, которая принимает массив и возвращает новый массив без повторяющихся элементов.

### Примеры:
- Вход: `[1, 2, 2, 3, 4, 4, 5]` → Выход: `[1, 2, 3, 4, 5]`
- Вход: `[10, 10, 20, 30, 30]` → Выход: `[10, 20, 30]`
*/
func removeDuplicates(from numbers: [Int]) -> [Int] {
    // Ваш код
    return []
}

// Пример использования
removeDuplicates(from: [1, 2, 2, 3, 4, 4, 5]) // Ожидается: [1, 2, 3, 4, 5]
removeDuplicates(from: [10, 10, 20, 30, 30]) // Ожидается: [10, 20, 30]

//: ## Задача 18: Найти общие элементы двух массивов
/*:
Напишите функцию `commonElements(between:and:)`, которая возвращает массив общих элементов между двумя массивами.

### Примеры:
- Вход: `[1, 2, 3]`, `[3, 4, 5]` → Выход: `[3]`
- Вход: `[10, 20, 30]`, `[20, 30, 40]` → Выход: `[20, 30]`
*/
func commonElements(between array1: [Int], and array2: [Int]) -> [Int] {
    // Ваш код
    return []
}

// Пример использования
commonElements(between: [1, 2, 3], and: [3, 4, 5])        // Ожидается: [3]
commonElements(between: [10, 20, 30], and: [20, 30, 40]) // Ожидается: [20, 30]

//: ## Задача 19: Найти разницу между массивами
/*:
Напишите функцию `difference(between:and:)`, которая возвращает массив элементов, которые есть в первом массиве, но отсутствуют во втором.

### Примеры:
- Вход: `[1, 2, 3]`, `[2, 3, 4]` → Выход: `[1]`
- Вход: `[10, 20, 30]`, `[30, 40]` → Выход: `[10, 20]`
*/
func difference(between array1: [Int], and array2: [Int]) -> [Int] {
    // Ваш код
    return []
}

// Пример использования
difference(between: [1, 2, 3], and: [2, 3, 4])  // Ожидается: [1]
difference(between: [10, 20, 30], and: [30, 40]) // Ожидается: [10, 20]

//: ## Задача 20: Найти слова, содержащие заданную подстроку
/*:
Напишите функцию `findWords(containing:in:)`, которая принимает подстроку и строку, возвращая массив слов, содержащих эту подстроку.

### Примеры:
- Вход: "an", "banana and apple" → Выход: `["banana", "and"]`
- Вход: "pp", "apple pineapple" → Выход: `["apple", "pineapple"]`
*/
func findWords(containing substring: String, in text: String) -> [String] {
    // Ваш код
    return []
}

// Пример использования
findWords(containing: "an", in: "banana and apple") // Ожидается: ["banana", "and"]
findWords(containing: "pp", in: "apple pineapple")  // Ожидается: ["apple", "pineapple"]

//: ## Задача 21: Перевернуть массив
/*:
Напишите функцию `reverseArray(_:)`, которая принимает массив и возвращает новый массив с элементами в обратном порядке.

### Примеры:
- Вход: `[1, 2, 3, 4]` → Выход: `[4, 3, 2, 1]`
- Вход: `[10, 20, 30]` → Выход: `[30, 20, 10]`
*/
func reverseArray(_ array: [Int]) -> [Int] {
    // Ваш код
    return []
}

// Пример использования
reverseArray([1, 2, 3, 4]) // Ожидается: [4, 3, 2, 1]
reverseArray([10, 20, 30]) // Ожидается: [30, 20, 10]

//: ## Задача 22: Найти первое повторяющееся число
/*:
Напишите функцию `firstDuplicate(in:)`, которая возвращает первое повторяющееся число в массиве или `nil`, если таких чисел нет.

### Примеры:
- Вход: `[1, 2, 3, 2, 4]` → Выход: `2`
- Вход: `[5, 6, 7]` → Выход: `nil`
*/
func firstDuplicate(in numbers: [Int]) -> Int? {
    // Ваш код
    return nil
}

// Пример использования
firstDuplicate(in: [1, 2, 3, 2, 4]) // Ожидается: 2
firstDuplicate(in: [5, 6, 7])       // Ожидается: nil

//: ## Задача 23: Проверить, является ли массив палиндромом
/*:
Напишите функцию `isArrayPalindrome(_:)`, которая возвращает `true`, если массив является палиндромом.

### Примеры:
- Вход: `[1, 2, 3, 2, 1]` → Выход: `true`
- Вход: `[1, 2, 3]` → Выход: `false`
*/
func isArrayPalindrome(_ array: [Int]) -> Bool {
    // Ваш код
    return false
}

// Пример использования
isArrayPalindrome([1, 2, 3, 2, 1]) // Ожидается: true
isArrayPalindrome([1, 2, 3])       // Ожидается: false

//: ## Задача 24: Найти самое частое число
/*:
Напишите функцию `mostFrequentNumber(in:)`, которая возвращает число, которое встречается в массиве чаще всего. Если таких чисел несколько, верните любое из них.

### Примеры:
- Вход: `[1, 2, 2, 3, 3, 3]` → Выход: `3`
- Вход: `[4, 4, 5, 5]` → Выход: `4` или `5`
*/
func mostFrequentNumber(in numbers: [Int]) -> Int? {
    // Ваш код
    return nil
}

// Пример использования
mostFrequentNumber(in: [1, 2, 2, 3, 3, 3]) // Ожидается: 3
mostFrequentNumber(in: [4, 4, 5, 5])       // Ожидается: 4 или 5

//: ## Задача 25: Найти все простые числа до N
/*:
Напишите функцию `findPrimes(upTo:)`, которая принимает число `N` и возвращает массив всех простых чисел от 2 до `N`.

### Примеры:
- Вход: `10` → Выход: `[2, 3, 5, 7]`
- Вход: `20` → Выход: `[2, 3, 5, 7, 11, 13, 17, 19]`
*/
func findPrimes(upTo n: Int) -> [Int] {
    // Ваш код
    return []
}

// Пример использования
findPrimes(upTo: 10) // Ожидается: [2, 3, 5, 7]
findPrimes(upTo: 20) // Ожидается: [2, 3, 5, 7, 11, 13, 17, 19]

//: ## Задача 26: Перемешать массив случайным образом
/*:
Напишите функцию `shuffleArray(_:)`, которая принимает массив и возвращает новый массив с элементами в случайном порядке.

### Примеры:
- Вход: `[1, 2, 3, 4, 5]` → Выход: `[3, 5, 1, 4, 2]` (примерный результат)
- Вход: `[10, 20, 30]` → Выход: `[30, 10, 20]` (примерный результат)
*/
func shuffleArray(_ array: [Int]) -> [Int] {
    // Ваш код
    return []
}

// Пример использования
shuffleArray([1, 2, 3, 4, 5]) // Примерный результат: [3, 5, 1, 4, 2]
shuffleArray([10, 20, 30])    // Примерный результат: [30, 10, 20]

//: ## Задача 27: Проверить, все ли числа в массиве чётные
/*:
Напишите функцию `areAllEven(in:)`, которая возвращает `true`, если все числа в массиве являются чётными.

### Примеры:
- Вход: `[2, 4, 6]` → Выход: `true`
- Вход: `[2, 3, 4]` → Выход: `false`
*/
func areAllEven(in numbers: [Int]) -> Bool {
    // Ваш код
    return false
}

// Пример использования
areAllEven(in: [2, 4, 6]) // Ожидается: true
areAllEven(in: [2, 3, 4]) // Ожидается: false

//: ## Задача 28: Проверить, содержит ли массив заданное число
/*:
Напишите функцию `containsNumber(_:in:)`, которая возвращает `true`, если массив содержит заданное число.

### Примеры:
- Вход: `3`, `[1, 2, 3, 4, 5]` → Выход: `true`
- Вход: `6`, `[1, 2, 3, 4, 5]` → Выход: `false`
*/
func containsNumber(_ number: Int, in array: [Int]) -> Bool {
    // Ваш код
    return false
}

// Пример использования
containsNumber(3, in: [1, 2, 3, 4, 5]) // Ожидается: true
containsNumber(6, in: [1, 2, 3, 4, 5]) // Ожидается: false

//: ## Задача 29: Найти сумму квадратов чисел в массиве
/*:
Напишите функцию `sumOfSquares(in:)`, которая возвращает сумму квадратов всех чисел в массиве.

### Примеры:
- Вход: `[1, 2, 3]` → Выход: `14`
- Вход: `[4, 5]` → Выход: `41`
*/
func sumOfSquares(in numbers: [Int]) -> Int {
    // Ваш код
    return 0
}

// Пример использования
sumOfSquares(in: [1, 2, 3]) // Ожидается: 14
sumOfSquares(in: [4, 5])    // Ожидается: 41

//: ## Задача 30: Удалить все отрицательные числа из массива
/*:
Напишите функцию `removeNegatives(from:)`, которая возвращает новый массив, содержащий только положительные числа.

### Примеры:
- Вход: `[-1, 2, -3, 4]` → Выход: `[2, 4]`
- Вход: `[10, -10, 20, -20]` → Выход: `[10, 20]`
*/
func removeNegatives(from numbers: [Int]) -> [Int] {
    // Ваш код
    return []
}

// Пример использования
removeNegatives(from: [-1, 2, -3, 4])    // Ожидается: [2, 4]
removeNegatives(from: [10, -10, 20, -20]) // Ожидается: [10, 20]

